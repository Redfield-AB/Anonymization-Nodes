<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./icons/create_hierarchy.png" type="Manipulator" xmlns="http://knime.org/node/v2.10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
    <name>Create Hierarchy</name>
    
    <shortDescription>
        Node for creating generalization hierarchies.
    </shortDescription>
    
    <fullDescription>
        <intro>
        	Node for creating generalization hierarchies. There are four different types of hierarchies:
        	<ul>
        		<li>Date-based;</li>
        		<li>Interval-based;</li>
        		<li>Order-based;</li>
        		<li>Mask-based;</li>
        	</ul>
			Selection of hierarchy type depends on data types of attributes.
        </intro>
       	<tab name="Masking-based hierarchies">
       		<description>
       			Masking is a flexible mechanism that can be applied to many types of attributes and is especially suitable for alphanumeric codes, such as ZIP codes.
       		</description>
       		<option name="Alignment">
       			Alignment direction - left or right side of the string.
       		</option>
       		<option name="Masking">
       			Masking direction - starts masking from left or right side of the string.
       		</option>
       		<option name="Padding character">
       			All values are adjusted to the same length by adding padding characters.
       		</option>
       		<option name="Masking character">
       			A character for masking.
       		</option>
       	</tab>
       	<tab name="Interval-based hierarchies">
       		<description>
				Interval is a regular method of generalization for values with a ratio scale, such as integers or decimals. 
				First, the sequence of intervals can be defined on the left side of the view. 
				At the next step subsequent levels consisting of groups of intervals from the previous level are specified. 
				Each group combines a given number of elements from the previous level. 
				Any sequence of intervals or groups is automatically repeated to cover the complete range of the attribute.
       		</description>
       		<option name="Aggregate Function">
       			In order to create labels for intervals, each element must be associated with an aggregation function. 
       			The following aggregation functions are supported:
       			<ul>
       				<li>Set: a set representation of input values is returned.</li>
       				<li>Prefix: a set of prefixes of the input values is returned. There is a parameter that allows defining the length of these prefixes.</li>
       				<li>Common-prefix: returns the biggest common prefix.</li>
       				<li>Bounds: returns the first and the last elements of the set.</li>
       				<li>Interval: an interval between the minimum and maximum values is returned.</li>
       				<li>Constant: returns a pre-defined constant value.</li>
       			</ul>
       		</option>
       		<option name="Range">
       			Interval-based hierarchies might define ranges of the bins. 
       			Any value in input table out of the range defined by "minimum value" or "maximum value" will produce an error message. 
       			This can be used to implement sanity checks. 
       			Any value between the minimum or maximum values and the "bottom coding" or "top coding" values will be top- or bottom-coded. 
       			If values fall into an interval stretching from the bottom coding or top coding limit to the "snap" limit, 
       			it will be extended to the bottom or top coding limit. 
       			Within the remaining range intervals will be repeated.
       		</option>
       		<option name="Interval">
       			Intervals are defined by a minimum (inclusive) and maximum (exclusive) bound.
       		</option>
       		<option name="Group">
       			Groups are defined by their size. 
       			Bins at the previous levels are created automatically to fit the number of groups at the next levels.
       		</option>
       	</tab>
       	<tab name="Order-based hierarchies">
       		<description>
       			Order-based hierarchies follow a similar idea as interval-based hierarchies, but they can be applied to attributes with ordinal scale. 
       			In addition to the types of attributes covered by interval-based hierarchies this includes strings, using their lexicographical order, and ordinals.
       		</description>
       		<option name="Order">
       			First of all attributes within the domain should be ordered as defined by the user or the data type. 
       			After that ordered values can be grouped using a mechanism similar to the one used for interval-based hierarchies. 
       			The mechanism can be used for creating semantic hierarchies from a pre-defined meaningful ordering of the domain of a discrete variable.
       		</option>
       	</tab>
       	<tab name="Date-based hierarchies">
       		<description>
       			Date-based hierarchies are used by specifying the granularity of output data at increasing generalization levels.
       		</description>
       		<option name="Bottom coding from">
       			Any value below this date will be bottom-coded.
       		</option>
       		<option name="Top condig from">
       			Any value above this date will be top-coded.
       		</option>
       		<option name="Granularity">
				Granularity of output data. 
				Please note that it is important to specify granularity levels that form an hierarchy 
				(e.g. day-of-week can typically not be followed by week-of-year, 
				because the same day-of-week can be generalized to different weeks of a year). 
				When this constraint is violated an error message will be thrown during the anonymization process in Hierarchical Anonymization node.
       		</option>
       		<option name="Format">
       			Format pattern. Please refer to <a href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</a>
       			documentation for available options.
       		</option>
       	</tab>
    </fullDescription>
    
    <ports>
        <inPort index="0" name="Input table">Input table</inPort>
        <inPort index="1" name="Hierarchy Configuration">Hierarchy Configuration</inPort>
        <!-- possibly more input ports here-->
        <outPort index="0" name="Input data table unchanged">Input data table unchanged</outPort>
        <outPort index="1" name="Hierarchy preview">Hierarchy preview</outPort>
        <outPort index="2" name="Hierarchy Configuration">Hierarchy Configuration</outPort>
    </ports>
</knimeNode>
